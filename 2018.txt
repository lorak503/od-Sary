// 2018

/* Silnia v1 */

#include <omp.h>
#include <stdlib.h>
#include <stdio.h>

int main(){
    int n, fac_priv = 1;
    #pragma omp parallel
    {
        #pragma omp for reduction(*:fac_priv)
        for(i=2; i<=number; i++)
            fac_priv*=n;
    }
    printf("Silnia %d: %d\n",number,fac_priv);
    return EXIT_SUCCESS;
}

/* Silnia v2 */

#include <omp.h>
#include <stdio.h>
#include <stdlib.h>
#define number 5

int main(){
    int i, fac_priv;
    int fac=1;

    #pragma omp parallel private(fac_priv)
    {
        fac_priv=1;
        #pragma omp for nowait
            for(i=1; i<=number; i++)
                fac_priv*=i;
        #pragma omp atomic
        fac*=fac_priv;
    }
    printf("Silnia: %d\n",fac);
    return EXIT_SUCCESS;
}

/* Max lokal */

#include <omp.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <math.h>
#define N 5

int main(){
int i;
float max, max_loc, diff;
float A[] = {60,10,15,25,100};

max = fabs(A[1] - A[0]);
	max_loc = max;
	#pragma omp parallel firstprivate(max_loc)
	{
		#pragma omp for
		for(i = 2; i < N; i++) {
			diff = fabs(A[i]-A[i-1]);
			if(diff>max_loc) max_loc = diff;
		}

		#pragma omp critical
		{
			if(max_loc> max) max = max_loc;
		}

		#pragma omp barrier
		#pragma omp master
		{
			printf("%20.2f (diff maximum)\n", max);
		}

	}

	return EXIT_SUCCESS;
}


/* Minimum */

#include <stdio.h>
#include <stdlib.h>
#include <omp.h>
#include <time.h>
#include <limits.h>
#define N 10

int main(){
    int A[N], min = INT_MAX, minl;
        int i, seed;
    time_t t;
    seed = time(&t);
    srand(seed);
    for(i = 0; i < N; i++){
        A[i] = rand()%100;
    }

    for(i = 0; i < N; i++){
        printf("%5d", A[i]);
    }
    printf("\n");
    #pragma omp parallel private(i)
    {
        minl = INT_MAX;
        #pragma omp for
        for(i = 0; i < N; i++){
            if(minl > A[i]){
                minl = A[i];
            }
        }
        #pragma omp critical
        {
            if(minl < min){
                min = minl;
            }
        }
    }
    printf("minimum: %d\n", min);

    return EXIT_SUCCESS;
}

// 2017

/* Napisz program w C z użyciem OpenMP, który wyznacza największą różnicę między 2 kolejnymi liczbami, z N elementowej tablicy.
Program wykonuje p wątków, 1 <= p <= N, w środowisku z pamięcią wspólną. */

#include <omp.h>
#include <stdio.h>
#define N 5

int abs(int a){
    return(a<0)?-a:a;
}

int main(){
    int a[N]={5,12,34,1,22};
    int i;
    for(i=0;i<N;i++){
        printf("%d\t",a[i]);
    }
    int roznica;
    int maxroznica=0;

    #pragma omp for private(i,roznica)
    for(i=0;i<N-1;i++){
        roznica=abs(a[i]-a[i+1]);
        #pragma omp critical
        {
            if(roznica>maxroznica){
                maxroznica=roznica;
            }
        }
    }
    printf("Najwieksza roznica: %d\n",maxroznica);
    return 0;
}


/* Napisz program w C z użyciem OpenMP, który wykonuje mnożenie macierzy o rozmiarze NxN przez wektor długości N (wynikiem jest wektor długości N).
Program wykonuje p wątków, 1 <= p <= N, w środowisku z pamięcią wspólną. */

#include <omp.h>
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#define N 4

    int macierz[N][N]={{1,1,1,1},{1,2,3,4},{5,6,7,8},{10,10,10,10}};
    int wektor[N]={0,1,2,3};
    int wynik[N];

int main(int argc,char**argv){

    int i;
    int j;
    #pragma omp parallel for private(j)
    for(i=0;i<N;++i){
        wynik[i]=0;
        for(i=0;i<N;++i){
            int j;
            wynik[i]=0;
            for(j=0;j<N;++j) {
                wynik[i]+=macierz[i][j]*wektor[j];
            }
        }
        printf("Macierz:\n");
        for(i=0;i<N;++i){
            int j;
            for(j=0;j<N;++j){
                printf("%d\t",macierz[i][j]);
            }
            printf("\n");
        }
        printf("\n Wektor \n");
        for(i=0; i<N; ++i) {
            printf("%d\n",wektor[i]);
        }
        printf("\n Wynik \n");
        for(i=0; i<N;++i){
            printf("%d\n",wynik[i]);
        }
        printf("\n");
    }
}